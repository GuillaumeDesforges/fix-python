#!/usr/bin/env bash
set -e

# This script fix issues with Python binaries on NixOS
# Usage:
# fix-python --venv .venv [--libs libs.nix] [--no-default-libs]

DEFAULT_LIBS_EXPRESSION="
(
  let pkgs = import (builtins.getFlake \"nixpkgs\") { };
  in [
    pkgs.gcc.cc
    pkgs.glibc
    pkgs.zlib
  ]
)
"

# Help
if [ "$1" = "--help" ]; then
  echo "Usage: fix-python --venv .venv [--libs libs.nix] [--no-default-libs]"
  echo "--help: show this help message"
  echo "--venv: path to Python virtual environment"
  echo "--libs: path to a Nix file which returns a list of derivations"
  echo "--no-default-libs: don't patch C++ standard libraries, glibc, and zlib by default"
  echo "--gpu: enable GPU support"
  echo "--with-torch: fix pytorch dependencies issues"
  echo "--verbose: increase verbosity"
  exit 0
fi

# arguments
while [ $# -gt 0 ]; do
  case "$1" in
    --venv)
      shift
      VENV_PATH="$1"
      ;;
    --libs)
      shift
      LIBS_PATH="$1"
      ;;
    --no-default-libs)
      shift
      DEFAULT_LIBS_EXPRESSION="[]"
      ;;
    --gpu)
      enable_gpu="1"
      ;;
    --with-torch)
      enable_torch="1"
      ;;
    --verbose)
      verbose="1"
      ;;
    *)
      echo "Unknown argument: $1"
      echo "Usage: fix-python --venv .venv [--libs libs.nix] [--no-default-libs]"
      exit 1
      ;;
  esac
  shift
done

# check arguments
if [ -z "$VENV_PATH" ]; then
  echo "Missing argument: --venv"
  echo "Usage: fix-python --venv .venv [--libs libs.nix] [--no-default-libs]"
  echo "or set VENV_PATH"
  exit 1
fi

# check runtime dependencies are installed
if ! command -v file &> /dev/null
then
  echo "Automatically adding \"file\" to PATH."
  dep_file_path="$(nix build --no-link --print-out-paths nixpkgs#file.out)/bin"
  export PATH="$dep_file_path:$PATH"
  if [ "$verbose" ]; then echo "dep_file_path=$dep_file_path"; fi
fi
if ! command -v patchelf &> /dev/null
then
  echo "Automatically adding \"patchelf\" to PATH."
  dep_patchelf_path="$(nix build --no-link --print-out-paths nixpkgs#patchelf)/bin"
  export PATH="$dep_patchelf_path:$PATH"
  if [ "$verbose" ]; then echo "dep_patchelf_path=$dep_patchelf_path"; fi
fi

# load libs from Nix file
if [ "$LIBS_PATH" ];
then
  custom_libs_expression="(import $LIBS_PATH)"
  mkdir -p .nix/fix-python
  nix_libs_build_status=$(
    nix build --impure --expr "$custom_libs_expression" -o .nix/fix-python/result
    echo $?
  )
  if [ "$nix_libs_build_status" -eq "1" ];
  then
    echo "Failed to load libs from Nix file $LIBS_PATH"
    echo ""
    echo "Try to debug this issue with the command:"
    echo "    nix build --impure --expr \"import $LIBS_PATH\""
    exit 1
  fi
else
  custom_libs_expression="[]"
fi
all_nix_libs_expression="($custom_libs_expression ++ $DEFAULT_LIBS_EXPRESSION)"
nixos_python_nix_libs="$(nix eval --impure --expr "let pkgs = import (builtins.getFlake \"nixpkgs\") {}; in pkgs.lib.strings.makeLibraryPath $all_nix_libs_expression" | sed 's/^"\(.*\)"$/\1/')"
if [ "$verbose" ]; then echo "nixos_python_nix_libs=$nixos_python_nix_libs"; fi
libs="$nixos_python_nix_libs"

# load libs from virtual environment
python_venv_libs=$(echo "$(find "$(realpath "$VENV_PATH")" -name '*.libs'):$(find "$(realpath "$VENV_PATH")" -name 'lib')" | tr '\n' ':')
if [ "$verbose" ]; then echo "nixos_python_venv_libs=$python_venv_libs"; fi
libs="$libs:$python_venv_libs"

# load libs from NixOS for GPU support if requested
if [ "$enable_gpu" ]; then
  nixos_gpu_libs="$(readlink /run/opengl-driver)/lib"
  if [ "$verbose" ]; then echo "nixos_gpu_libs=$nixos_gpu_libs"; fi
  libs="$libs:$nixos_gpu_libs"
fi

# put it all together
libs=$(echo "$libs" | sed 's/:\+/:/g' | sed 's/^://' | sed 's/:$//')
if [ "$verbose" ]; then echo "libs=$libs"; fi

# patch each binary file found in the virtual environment
# shellcheck disable=SC2156
binary_files=$(find "$(realpath "$VENV_PATH")" -type f -executable -exec sh -c "file -i '{}' | grep -qE 'x-(.*); charset=binary'" \; -print)
n_binary_files=$(wc -l <<< "$binary_files")
echo "Found $n_binary_files binary files"
cat <<< "$binary_files" \
  | while read -r file
    do
      echo "Patching file: $file"
      old_rpath="$(patchelf --print-rpath "$file" || true)"
      # prevent duplicates
      new_rpath="$(echo "$libs:$old_rpath"  | sed 's/:$//' | tr ':' '\n' | sort --unique | tr '\n' ':' | sed 's/^://' | sed 's/:$/\n/')"
      patchelf --set-rpath "$new_rpath" "$file" || true
      old_interpreter=$(patchelf --print-interpreter "$file" || true)
      if [ -n "$old_interpreter" ]; then
        interpreter_name="$(basename "$old_interpreter")"
        new_interpreter="$(echo "$new_rpath" | tr ':' '\n' | xargs -I {} find {} -name "$interpreter_name" | head -1)"
        patchelf --set-interpreter "$new_interpreter" "$file" || true
      fi
      echo
    done

# `libtorch_global_deps.so` depends on libstdc++ but does not properly declare it, fix it manually see
# https://github.com/eth-sri/lmql/blob/main/scripts/flake.d/overrides.nix#L28-L40
if [ "$enable_torch" ]; then
    torch_files=$(find "$(realpath "$VENV_PATH")" -name libtorch_global_deps.so)
    cat <<< "$torch_files" \
      | while read -r file
        do
          echo "Patching torch file: $file"
          patchelf $file --add-needed libstdc++.so
        done
fi
